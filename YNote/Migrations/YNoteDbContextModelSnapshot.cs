// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YNote_DAL;

namespace YNote.Migrations
{
    [DbContext(typeof(YNoteDbContext))]
    partial class YNoteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YNote_DAL.Entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName");

                    b.Property<int>("SpaceId");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupName = "FirstGroup",
                            SpaceId = 1
                        });
                });

            modelBuilder.Entity("YNote_DAL.Entities.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AssignedUserId");

                    b.Property<DateTimeOffset>("CreationTime");

                    b.Property<int?>("GroupId");

                    b.Property<int?>("SpaceId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedUserId = new Guid("30fb2dd3-ea0e-4f05-b0db-ef6341a593f0"),
                            CreationTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GroupId = 1
                        });
                });

            modelBuilder.Entity("YNote_DAL.Entities.SpaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("SpaceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Spaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = new Guid("30fb2dd3-ea0e-4f05-b0db-ef6341a593f0"),
                            SpaceName = "FirstSpace"
                        });
                });

            modelBuilder.Entity("YNote_DAL.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<int>("NoteId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("SumUp")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A lot of text",
                            NoteId = 1,
                            Status = false,
                            SumUp = "Text"
                        });
                });

            modelBuilder.Entity("YNote_DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<int?>("SpaceEntityId");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SpaceEntityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30fb2dd3-ea0e-4f05-b0db-ef6341a593f0"),
                            Email = "burtso.ab@gmail.com",
                            Name = "Andriy",
                            Nickname = "Shails",
                            Password = "SomePassword",
                            Surname = "Burtso"
                        });
                });

            modelBuilder.Entity("YNote_DAL.Entities.GroupEntity", b =>
                {
                    b.HasOne("YNote_DAL.Entities.SpaceEntity", "Space")
                        .WithMany("Groups")
                        .HasForeignKey("SpaceId");
                });

            modelBuilder.Entity("YNote_DAL.Entities.NoteEntity", b =>
                {
                    b.HasOne("YNote_DAL.Entities.UserEntity", "AssignedUser")
                        .WithMany("Notes")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("YNote_DAL.Entities.GroupEntity", "Group")
                        .WithMany("Notes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("YNote_DAL.Entities.SpaceEntity", "Space")
                        .WithMany("Notes")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YNote_DAL.Entities.SpaceEntity", b =>
                {
                    b.HasOne("YNote_DAL.Entities.UserEntity", "Author")
                        .WithMany("Spaces")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YNote_DAL.Entities.TaskEntity", b =>
                {
                    b.HasOne("YNote_DAL.Entities.NoteEntity", "Note")
                        .WithMany("Tasks")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YNote_DAL.Entities.UserEntity", b =>
                {
                    b.HasOne("YNote_DAL.Entities.SpaceEntity")
                        .WithMany("Users")
                        .HasForeignKey("SpaceEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
